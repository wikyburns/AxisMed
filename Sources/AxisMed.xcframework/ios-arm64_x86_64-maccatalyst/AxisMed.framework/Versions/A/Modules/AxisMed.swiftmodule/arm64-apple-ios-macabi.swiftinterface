// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.19.9 clang-1700.3.19.1)
// swift-module-flags: -target arm64-apple-ios18.2-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name AxisMed
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import AVFoundation
import Accelerate
import AppKit
import CoreGraphics
import CoreImage
import CoreML
import CoreVideo
import CryptoKit
import DeveloperToolsSupport
import Foundation
import ModelIO
import SceneKit.ModelIO
import Network
import QuartzCore
import SceneKit
import Swift
import SwiftUI
import UIKit
import Vision
import ZIPFoundation
import _Concurrency
import _SceneKit_SwiftUI
import _StringProcessing
import _SwiftConcurrencyShims
public typealias Polygon = [CoreFoundation.CGPoint]

public struct Part {
  public var confidence: Swift.Float
  #if compiler(>=5.3) && $NonescapableTypes
  public func exportScene(to url: Foundation.URL, completion: @escaping (Swift.Result<Foundation.URL, any Swift.Error>) -> Swift.Void)
  #endif
}
public enum ScanType {
  case foot
  case leftFoam
  case rightFoam
  case dualFoam
  case plantarSurface
  public static func == (a: AxisMed.ScanType, b: AxisMed.ScanType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct ThreeDViewerPredictor : SwiftUICore.View {
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public init(modelURL: SwiftUICore.Binding<Foundation.URL?>, scanType: AxisMed.ScanType, isLocalFile: Swift.Bool = true)
  #endif
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func alignToPlane()
  public typealias Body = @_opaqueReturnTypeOf("$s7AxisMed21ThreeDViewerPredictorV4bodyQrvp", 0) __
}

public class AxisMedPredictor {
  public var alignedToPlane: Swift.Bool {
    get
    set
    _modify
  }
  public var objectsDetected: [AxisMed.Part] {
    get
    set
    _modify
  }
  public init()
  @objc deinit
}
extension AxisMed.AxisMedPredictor : nonisolated Observation.Observable {
}
extension AxisMed.ScanType : Swift.Equatable {}
extension AxisMed.ScanType : Swift.Hashable {}
extension AxisMed.ThreeDViewerPredictor : Swift.Sendable {}
